// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iidy.proto

/*
Package iidy is a generated protocol buffer package.

It is generated from these files:
	iidy.proto

It has these top-level messages:
	Entry
	Entries
	PutReply
	GetReply
*/
package iidy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A single list entry
type Entry struct {
	List string `protobuf:"bytes,1,opt,name=list" json:"list,omitempty"`
	Item string `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Entry) GetList() string {
	if m != nil {
		return m.List
	}
	return ""
}

func (m *Entry) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

// A batch of list entries
type Entries struct {
	List  string   `protobuf:"bytes,1,opt,name=list" json:"list,omitempty"`
	Items []string `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *Entries) Reset()                    { *m = Entries{} }
func (m *Entries) String() string            { return proto.CompactTextString(m) }
func (*Entries) ProtoMessage()               {}
func (*Entries) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Entries) GetList() string {
	if m != nil {
		return m.List
	}
	return ""
}

func (m *Entries) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

// A reply from the service, saying what was done,
// and how many times.
type PutReply struct {
	Verb  string `protobuf:"bytes,1,opt,name=verb" json:"verb,omitempty"`
	Count int64  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *PutReply) Reset()                    { *m = PutReply{} }
func (m *PutReply) String() string            { return proto.CompactTextString(m) }
func (*PutReply) ProtoMessage()               {}
func (*PutReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PutReply) GetVerb() string {
	if m != nil {
		return m.Verb
	}
	return ""
}

func (m *PutReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// A reply from a Get, showing the number of attempts
// for this item. When the number of attempts is 0,
// check the OK field to determine if the attempts is
// 0 because the item was found and not attempted,
// or if it's because the item was not present.
type GetReply struct {
	Attempts int64 `protobuf:"varint,1,opt,name=attempts" json:"attempts,omitempty"`
	Ok       bool  `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
}

func (m *GetReply) Reset()                    { *m = GetReply{} }
func (m *GetReply) String() string            { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()               {}
func (*GetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetReply) GetAttempts() int64 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *GetReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*Entry)(nil), "iidy.Entry")
	proto.RegisterType((*Entries)(nil), "iidy.Entries")
	proto.RegisterType((*PutReply)(nil), "iidy.PutReply")
	proto.RegisterType((*GetReply)(nil), "iidy.GetReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RPCer service

type RPCerClient interface {
	// Puts a new value in a list
	Put(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*PutReply, error)
	// Gets a value's number of attempts from a list
	Get(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*GetReply, error)
	// Increments a value's number of attempts
	Inc(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*PutReply, error)
	// Deletes an item from a list
	Del(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*PutReply, error)
}

type rPCerClient struct {
	cc *grpc.ClientConn
}

func NewRPCerClient(cc *grpc.ClientConn) RPCerClient {
	return &rPCerClient{cc}
}

func (c *rPCerClient) Put(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*PutReply, error) {
	out := new(PutReply)
	err := grpc.Invoke(ctx, "/iidy.RPCer/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCerClient) Get(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := grpc.Invoke(ctx, "/iidy.RPCer/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCerClient) Inc(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*PutReply, error) {
	out := new(PutReply)
	err := grpc.Invoke(ctx, "/iidy.RPCer/Inc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCerClient) Del(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*PutReply, error) {
	out := new(PutReply)
	err := grpc.Invoke(ctx, "/iidy.RPCer/Del", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RPCer service

type RPCerServer interface {
	// Puts a new value in a list
	Put(context.Context, *Entry) (*PutReply, error)
	// Gets a value's number of attempts from a list
	Get(context.Context, *Entry) (*GetReply, error)
	// Increments a value's number of attempts
	Inc(context.Context, *Entry) (*PutReply, error)
	// Deletes an item from a list
	Del(context.Context, *Entry) (*PutReply, error)
}

func RegisterRPCerServer(s *grpc.Server, srv RPCerServer) {
	s.RegisterService(&_RPCer_serviceDesc, srv)
}

func _RPCer_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCerServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iidy.RPCer/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCerServer).Put(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCer_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iidy.RPCer/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCerServer).Get(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCer_Inc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCerServer).Inc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iidy.RPCer/Inc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCerServer).Inc(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCer_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCerServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iidy.RPCer/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCerServer).Del(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iidy.RPCer",
	HandlerType: (*RPCerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _RPCer_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RPCer_Get_Handler,
		},
		{
			MethodName: "Inc",
			Handler:    _RPCer_Inc_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _RPCer_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iidy.proto",
}

func init() { proto.RegisterFile("iidy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xdd, 0x4d, 0x57, 0xd3, 0x11, 0x7a, 0x08, 0x1e, 0x96, 0x9e, 0x4a, 0xf0, 0xd0, 0x53,
	0x05, 0x2b, 0xbe, 0x80, 0x4a, 0xf1, 0xb6, 0xe4, 0x0d, 0x6c, 0x9d, 0x43, 0xe8, 0x76, 0xb3, 0x24,
	0xb3, 0x42, 0x9f, 0xc6, 0x57, 0x95, 0x99, 0xb8, 0x9e, 0x16, 0xec, 0xed, 0xff, 0x87, 0xff, 0xcb,
	0x9f, 0x61, 0x00, 0xbc, 0xff, 0x3c, 0x6f, 0xfa, 0x18, 0x28, 0x98, 0x19, 0x6b, 0xfb, 0x00, 0xd5,
	0x5b, 0x47, 0xf1, 0x6c, 0x0c, 0xcc, 0x5a, 0x9f, 0xa8, 0x2e, 0x56, 0xc5, 0x7a, 0xee, 0x44, 0xf3,
	0xcc, 0x13, 0x9e, 0xea, 0x32, 0xcf, 0x58, 0xdb, 0x2d, 0xdc, 0x30, 0xe0, 0x31, 0x4d, 0x22, 0x77,
	0x50, 0x71, 0x2c, 0xd5, 0xe5, 0x4a, 0xad, 0xe7, 0x2e, 0x1b, 0xfb, 0x04, 0xba, 0x19, 0xc8, 0x61,
	0xdf, 0x4a, 0xd1, 0x17, 0xc6, 0xfd, 0x48, 0xb1, 0x66, 0xea, 0x10, 0x86, 0x8e, 0xa4, 0x49, 0xb9,
	0x6c, 0xec, 0x33, 0xe8, 0x1d, 0xfe, 0x52, 0x4b, 0xd0, 0x1f, 0x44, 0x78, 0xea, 0x29, 0x09, 0xa9,
	0xdc, 0x9f, 0x37, 0x0b, 0x28, 0xc3, 0x51, 0x50, 0xed, 0xca, 0x70, 0x7c, 0xfc, 0x2e, 0xa0, 0x72,
	0xcd, 0x0b, 0x46, 0x73, 0x0f, 0xaa, 0x19, 0xc8, 0xdc, 0x6e, 0x64, 0x6f, 0x59, 0x74, 0xb9, 0xc8,
	0x66, 0xfc, 0x8f, 0xbd, 0xe2, 0xd4, 0x0e, 0xa7, 0x53, 0x63, 0x7f, 0x4e, 0xbd, 0x77, 0x87, 0x0b,
	0xde, 0x7a, 0xc5, 0xf6, 0x9f, 0xd4, 0xfe, 0x5a, 0x4e, 0xb0, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff,
	0xe3, 0x45, 0x1d, 0x04, 0x90, 0x01, 0x00, 0x00,
}
